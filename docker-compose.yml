version: '3.5'
services:

# ====================== Сервис №1 Django + Postgres ======================

  # Django приложения
  main_django:
    build:
      context: ./main
      dockerfile: Dockerfile
      network: host
    container_name: main_django
    restart: always
    volumes:
      - ./main:/usr/src/app
    ports:
      - "9000:8000"
    depends_on:
      - main_postgres
    env_file:
      - ./main/.env

  # Postgres для Django приложения
  main_postgres:
    image: postgres
    container_name: main_postgres
    restart: always
    ports:
      - "9001:5432"
    volumes:
       - ./postgres/data:/var/lib/postgresql/data
    env_file:
      - ./postgres/.env


# ====================== Сервис №2 Metabase + Postgres ======================
# Почитать про переменные окружения для запуска MetaBase:
#     https://www.metabase.com/docs/latest/operations-guide/environment-variables.html

  # Metabase приложение
  metabase-app:
    image: metabase/metabase
    restart: always
    ports:
      - "9002:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: postgres
      MB_DB_PASS: 777
      MB_DB_HOST: postgres_metabase
    depends_on:
      - postgres_metabase
    links:
      - postgres_metabase


  # Postgres для Metabase приложения
  postgres_metabase:
    image: postgres
    container_name: postgres_metabase
    restart: always
    volumes:
       - ./postgres_metabase/data:/var/lib/postgresql/data
    ports:
      - "9003:5432"
    env_file:
      - ./postgres_metabase/.env


# ====================== Сервис №3 Hasura + Postgres + Flask(Web hook) ======================

  # Hasura приложение
  graphql-engine:
    image: hasura/graphql-engine:v2.1.1
    ports:
      - "9004:8080"
    depends_on:
      - postgres_hasura
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:777@postgres_hasura:5432/hasura
      PG_DATABASE_URL: postgres://postgres:777@postgres_hasura:5432/hasura
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey

  # Postgres для Hasura приложения
  postgres_hasura:
    image: postgres:12
    restart: always
    volumes:
      - ./postgres_hasura/data:/var/lib/postgresql/data
    ports:
      - "9005:5432"
    env_file:
      - ./postgres_hasura/.env

  # Flask приложение как Web Hook для Hasura
  hasura_hook:
    build:
      context: ./hasura_hook
      dockerfile: Dockerfile
      network: host
    container_name: hasura_hook
    restart: always
    volumes:
      - ./hasura_hook:/usr/src/app
    ports:
      - "9006:8000"
    depends_on:
      - graphql-engine
    environment:
      HASURA_URL: http://localhost:9004/v1/graphql # URL хасуры для запросов GraphQL
      FLASK_PORT: 8000 # Порт на котором будет запущен Flask внутри своего контейнера
      PYTHONUNBUFFERED: 1


















#volumes:
#  postgres_hasura/data:


#    environment:
#      MB_DB_TYPE: postgres
#      MB_DB_DBNAME: microservices
#      MB_DB_PORT: 5432
#      MB_DB_USER: postgres
#      MB_DB_PASS: 777
#      MB_DB_HOST: main_postgres


#  # Сервис metabase 1
#  metabase-app:
#      image: metabase/metabase
#      restart: always
#      ports:
#        - 9003:3000
#      volumes:
#        # declare your mount volume /host/dir:/container/dir
#        - ./metabase/data:/metabase-data
#      environment:
#        MB_DB_TYPE: postgres
#        MB_DB_DBNAME: microservices
#        MB_DB_PORT: 9003
#        MB_DB_USER: postgres
#        MB_DB_PASS: 777
#        MB_DB_HOST: main_postgres
#      depends_on:
#        - main_postgres
#      links:
#        - main_postgres



#    environment:
#      POSTGRES_USER: "postgres"
#      POSTGRES_PASSWORD: 777
#      POSTGRES_DB: "microservices"